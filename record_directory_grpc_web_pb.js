/**
 * @fileoverview gRPC-Web generated client stub for com.samsung.datastore.recorddirectory
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: grpc/record_directory.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.com = {};
proto.com.samsung = {};
proto.com.samsung.datastore = {};
proto.com.samsung.datastore.recorddirectory = require('./record_directory_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryRequest,
 *   !proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryResponse>}
 */
const methodDescriptor_RecordDirectoryService_createRecordDirectory = new grpc.web.MethodDescriptor(
  '/com.samsung.datastore.recorddirectory.RecordDirectoryService/createRecordDirectory',
  grpc.web.MethodType.UNARY,
  proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryRequest,
  proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryResponse,
  /**
   * @param {!proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryResponse.deserializeBinary
);


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServiceClient.prototype.createRecordDirectory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/createRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_createRecordDirectory,
      callback);
};


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.samsung.datastore.recorddirectory.CreateRecordDirectoryResponse>}
 *     Promise that resolves to the response
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServicePromiseClient.prototype.createRecordDirectory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/createRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_createRecordDirectory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryRequest,
 *   !proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryResponse>}
 */
const methodDescriptor_RecordDirectoryService_updateRecordDirectory = new grpc.web.MethodDescriptor(
  '/com.samsung.datastore.recorddirectory.RecordDirectoryService/updateRecordDirectory',
  grpc.web.MethodType.UNARY,
  proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryRequest,
  proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryResponse,
  /**
   * @param {!proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryResponse.deserializeBinary
);


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServiceClient.prototype.updateRecordDirectory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/updateRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_updateRecordDirectory,
      callback);
};


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.samsung.datastore.recorddirectory.UpdateRecordDirectoryResponse>}
 *     Promise that resolves to the response
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServicePromiseClient.prototype.updateRecordDirectory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/updateRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_updateRecordDirectory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryRequest,
 *   !proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryResponse>}
 */
const methodDescriptor_RecordDirectoryService_listRecordDirectory = new grpc.web.MethodDescriptor(
  '/com.samsung.datastore.recorddirectory.RecordDirectoryService/listRecordDirectory',
  grpc.web.MethodType.UNARY,
  proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryRequest,
  proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryResponse,
  /**
   * @param {!proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryResponse.deserializeBinary
);


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServiceClient.prototype.listRecordDirectory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/listRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_listRecordDirectory,
      callback);
};


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.samsung.datastore.recorddirectory.ListRecordDirectoryResponse>}
 *     Promise that resolves to the response
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServicePromiseClient.prototype.listRecordDirectory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/listRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_listRecordDirectory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryRequest,
 *   !proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryResponse>}
 */
const methodDescriptor_RecordDirectoryService_deleteRecordDirectory = new grpc.web.MethodDescriptor(
  '/com.samsung.datastore.recorddirectory.RecordDirectoryService/deleteRecordDirectory',
  grpc.web.MethodType.UNARY,
  proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryRequest,
  proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryResponse,
  /**
   * @param {!proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryResponse.deserializeBinary
);


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServiceClient.prototype.deleteRecordDirectory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/deleteRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_deleteRecordDirectory,
      callback);
};


/**
 * @param {!proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.com.samsung.datastore.recorddirectory.DeleteRecordDirectoryResponse>}
 *     Promise that resolves to the response
 */
proto.com.samsung.datastore.recorddirectory.RecordDirectoryServicePromiseClient.prototype.deleteRecordDirectory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/com.samsung.datastore.recorddirectory.RecordDirectoryService/deleteRecordDirectory',
      request,
      metadata || {},
      methodDescriptor_RecordDirectoryService_deleteRecordDirectory);
};


module.exports = proto.com.samsung.datastore.recorddirectory;

